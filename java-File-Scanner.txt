import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sufyan
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        jTextArea1.append("Token\tDesc\t\tLineNo\n\n");
        jTextArea2.append("Litral\t\t\tLineNo\n\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        Text1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(300, 100));

        Text1.setText("File Path");
        Text1.setToolTipText("");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Scan");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("Token Table");

        jLabel2.setText("Litral Tabe");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Text1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jButton1)
                                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(Text1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        try {
            String filename=Text1.getText();
            FileReader fr=new FileReader(filename);
            BufferedReader  br= new BufferedReader(fr);
            String line;
           
            int lineNumber=0;
            while((line=br.readLine())!=null)
            {
                lineNumber++;
                if(line.contains("//"))
                {
                    line=removeComment(line);
                }
                if(line.contains("/*")&& line.contains("*/"))
                {
                    line=removeComment(line);
                }
                if(line.contains("/*"))
                {
                    int sindex=0;
                    int eindex=0;
                    sindex=line.indexOf("/*");
                    while(!br.readLine().contains("*/")){
                        eindex++;
                    }
                    line=removeComment(line);
                }
                StringTokenizer st=new StringTokenizer(line);
                while(st.hasMoreTokens())
                {
                    
                    var token=st.nextToken();
                    
                    
                    //find identifiers
                    if(token.equals("int")||token.equals("float")||token.equals("double")
                            ||token.equals("var")||token.equals("String")||token.equals("boolean")
                            ||token.equals("byte")||token.equals("long")||token.equals("char"))
                    {
                        var next=st.nextToken();
                        IsIdentifier(next,lineNumber);
                    }
                    
                    //check special keywords
                    if(token.equals("abstract")||token.equals("boolean")||token.equals("break")||
                            token.equals("byte")||token.equals("case")||token.equals("catch")||
                            token.equals("try")||token.equals("char")||token.equals("class")||
                            token.equals("public")||token.equals("private")||token.equals("protected")
                            ||token.equals("String")||token.equals("int")||token.equals("float")||
                            token.equals("double")||token.equals("continue")||token.equals("default")||
                            token.equals("default")||token.equals("if")||token.equals("else")||token.equals("final")
                            ||token.equals("finally")||token.equals("for")||token.equals("while")
                            ||token.equals("import")||token.equals("interface")||token.equals("long")
                            ||token.equals("new")||token.equals("package")||token.equals("return")
                            ||token.equals("static")||token.equals("short")||token.equals("super")
                            ||token.equals("switch")||token.equals("this")||token.equals("throw")
                            ||token.equals("void")||token.equals("void"))
                    {
                        allKeywords(token,lineNumber);
                    }
                    //check isDigit
                    else if(token.contains("0")||token.contains("1")||token.contains("2")||token.contains("3")||
                            token.contains("4")||token.contains("5")||token.contains("6")||token.contains("7")||
                            token.contains("8")||token.contains("9"))
                    {
                        
                        isNumeric(token,lineNumber);
                    }
                    //check all operators;
                    else if(token.contains("=")||token.contains("++")||token.contains("--")||token.contains("!")
                            ||token.contains("<")||token.contains(">")||token.contains("<=")
                            ||token.contains(">=")||token.contains("==")||token.contains("!="))
                    {
                       isOperators(token,lineNumber);
                    }
                    //check Conditional Operator
                    else if(token.contains("&&")||token.contains("||")||token.contains("&")||token.contains("|"))
                    {
                        conditionalOperator(token,lineNumber);
                    }
                    //check Arithmatic operator
                    else if(token.contains("+")||token.contains("-")||token.contains("*")||token.contains("/"))
                    {
                        arithmaticOperator(token,lineNumber);
                    }
                    else if(token.contains("(")||token.contains(")")||token.contains("{")||token.contains("}")||
                            token.contains("[")||token.contains("]")||token.contains(",")||token.contains(".")||
                            token.contains(";")||token.contains(":"))
                    {
                        specitialSymbol(token,lineNumber);
                    }
                    
                    else
                    {   
                        jTextArea2.append(token+"\t\t\t"+lineNumber+"\n");
                    
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }                                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         

        JFileChooser fc=new JFileChooser();
        fc.showOpenDialog(null);
        File f= fc.getSelectedFile();
        String filename=f.getAbsolutePath();
        Text1.setText(filename);
    }                                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField Text1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration                   

    private String removeComment(String line) {
        
        try {
        if (line.contains(("//"))) {
            int startIndex = line.indexOf("//");
            int endIndex = line.length();
            String tempoString = line.substring(startIndex, endIndex);
            line = line.replace(tempoString, "");
        }
        if (line.contains("/*")){
            int startIndex = line.indexOf("/*");
            int endIndex = line.length();
            String tempoString = line.substring(startIndex, endIndex);
            line = line.replace(tempoString, "");

        }

    } catch (Exception e) {
        // Do Nothing
    }
    return line;
                
    }

    public void allKeywords(String token,int lineNumber)
    {
        String[] AllKeywords=new String[]{"abstract","boolean","break","byte","case","catch","try","char",
        "class","public","private","protected","final","int","float","double","continue","default",
        "do","if","else","finally","for","while","import","interface","long","new","package","return","static",
        "short","super","switch","this","throw","void","var","String"};
        for (String AllKeyword : AllKeywords) {
            if (token.equals(AllKeyword)) {
                jTextArea1.append(token+"\t"+"Spectial keyword\t"+lineNumber+"\n");
            }
        }
        
    }

    public void isNumeric(String str,int lineNumber) {
        try{
            char[] ch= str.toCharArray();
            for(int i=0;i<str.length();i++)
            {
                boolean result=integer(ch[i]);
                if(result)
                {
                    jTextArea1.append(ch[i]+"");
                }
            }
            jTextArea1.append("\tPositiveInteger\t"+lineNumber+"\n");
        }
        catch(Exception e)
        {
            
        }
        
    }
    public boolean integer(char c)
    {
        boolean k=false;
        if(Character.isDigit(c))
        {
            k=true;
        }
        if(c=='.')
        {
            k=true;
        }
        return k;
    }
    public void specitialSymbol(String token,int lineNumber)
    {
        for(int i=0;i<token.length();i++)
        {
           char ch=token.charAt(i);
           if(ch=='('||ch==')'||ch=='{'||ch=='}'||ch=='['||ch==']'||ch=='.'||ch==','||ch==';'||ch==':')
           {
                jTextArea1.append("\n"+ch+"\t"+"Symbol\t\t"+lineNumber+"\n");
           }
        }
    }
    public void IsIdentifier(String token,int lineNumber)
    {
        try
        {
            jTextArea1.append(token+"\tIndentifier\t\t"+lineNumber+"\n");
        }
        catch(Exception e)
        {
            
        }
        
    }

    private void isOperators(String token,int lineNumber) {   
        try
        {
        char[] c=token.toCharArray();
        for(int i=0;i<c.length;i++)
        {
            switch (c[i]) {
                case '+':
                    if(c[i+1]=='+')
                    {
                        jTextArea1.append("\n"+c[i]+"");
                        jTextArea1.append(c[i+1]+"\tUniraryOperator\t"+lineNumber+"\n");
                        
                    }
                    break;
                case '-':
                    if(c[i+1]=='-')
                    {
                        jTextArea1.append("\n"+c[i]+"");
                        jTextArea1.append(c[i+1]+"\tUniraryOperator\t"+lineNumber+"\n");
                        
                        
                    }
                    break;
                case '<':
                    if(c[i+1]=='=')
                    {
                        jTextArea1.append("\n"+c[i]+"");
                        jTextArea1.append(c[i+1]+"\tRelationalOperator\t"+lineNumber+"\n");
                        
                    }
                    break;
                case '>':
                    if(c[i+1]=='=')
                    {
                        jTextArea1.append("\n"+c[i]+"");
                        jTextArea1.append(c[i+1]+"\tRelationalOperator\t"+lineNumber+"\n");
                        
                    }
                    break;
                case '!':
                    if(c[i+1]=='=')
                    {
                        jTextArea1.append("\n"+c[i]+"");
                        jTextArea1.append(c[i+1]+"\tRelationalOperator\t"+lineNumber+"\n");
                        
                    }   break;
                case '=':
                    if(c[i+1]=='=')
                    {
                        jTextArea1.append("\n"+c[i]+"");
                        jTextArea1.append(c[i+1]+"\tRelationalOperator\t"+lineNumber+"\n");
                        
                    }   break;
                default:
                    if(c[i]=='!')
                    {
                        jTextArea1.append(c[i]+"\tUniraryOperator\t"+lineNumber+"\n");
                    }
            }
            if(c[i]=='<'||c[i]=='>')
            {
                jTextArea1.append("\n"+c[i]+"\tRelationalOperator\t"+lineNumber+"\n");    
            }
            if(c[i]=='=')
            {
                jTextArea1.append("\n"+c[i]+"\tAssignmentOperator\t"+lineNumber+"\n");    
            }
        }
        }
        catch(Exception e)
        {
            
        }
    }
    private void arithmaticOperator(String token,int lineNumber) {
        for(int i=0;i<token.length();i++)
        {
            char c=token.charAt(i);
            if(c=='+'||c=='-'||c=='*'||c=='%')
            {
                jTextArea1.append("\n"+c+"\tArithmaticOpeartor\t"+lineNumber+"\n");
            }
            //if(c=='<'||c=='>')
            //{    
              //  jTextArea1.append("\nRelational opeartor "+lineNumber+":  "+c);                
            //}
            break;
        }
    }

    private void conditionalOperator(String token,int lineNumber) {
        try{
            char[] c=token.toCharArray();
        for(int i=0;i<c.length;i++)
        {
            if(c[i]=='&')
            {
                if(c[i+1]=='&')
                {
                        jTextArea1.append("\n"+c[i]+"");
                        jTextArea1.append(c[i+1]+"\tConditionalOperator\t"+lineNumber+"\n");
                }
            }
            if(c[i]=='|')
            {
                if(c[i+1]=='|')
                {
                        jTextArea1.append("\n"+c[i]+"");
                        jTextArea1.append(c[i+1]+"\tConditionalOperator\t"+lineNumber+"\n");
                }
            }
        }
    }
      catch(Exception e)
      {
      }
    }
}
